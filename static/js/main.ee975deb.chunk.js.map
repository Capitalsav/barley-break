{"version":3,"sources":["components/square.js","components/newGameButton.js","components/board.js","components/game.js","index.js"],"names":["Square","props","react_default","a","createElement","className","class","onClick","value","NewGameButton","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","squares","isWin","turn","row","column","zeroI","zeroJ","i","j","result","slice","setState","counter","checkWin","field","rand","Math","floor","random","length","indexOf","_this2","squareClass","square","handleClick","_this3","status","concat","victory","renderSquare","newGameButton","handleNewGame","React","Component","Game","board","ReactDOM","render","game","document","getElementById"],"mappings":"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","file":"static/js/main.ee975deb.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Square(props) {\n    return (\n        <button className={props.class} onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\nexport default Square","import React from 'react';\n\n\nfunction NewGameButton(props) {\n    return (\n        <button className=\"new-game\" onClick={props.onClick}>New Game</button>\n    )\n}\n\nexport default NewGameButton","import React from 'react';\nimport Square from './square';\nimport NewGameButton from './newGameButton'\n\nfunction getWinningCombination() {\n    return [[1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 0]]\n}\n\nfunction checkWin(squares) {\n    let winCount = 16;\n    let counter = 0;\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            if (squares[i][j] === getWinningCombination()[i][j]) {\n                counter++;\n            }\n        }\n    }\n    return counter === winCount;\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: getWinningCombination(),\n            isWin: false,\n            turn: 0\n        }\n    }\n\n    handleClick(row, column) {\n        if (this.state.squares[row][column] === 0) {\n            return;\n        } else if (this.state.isWin) {\n            return;\n        }\n        else {\n            let zeroI = 0;\n            let zeroJ = 0;\n            for (let i = 0; i < 4; i++) {\n                for (let j = 0; j < 4; j++) {\n                    if (this.state.squares[i][j] === 0) {\n                        zeroI = i;\n                        zeroJ = j;\n                    }\n                }\n            }\n\n            const result = this.state.squares.slice();\n            if (row === zeroI) {\n                if (column === zeroJ + 1 || column === zeroJ - 1) {\n                    result[zeroI][zeroJ] = result[row][column];\n                    result[row][column] = 0\n\n                    this.setState({\n                        squares: result.slice(),\n                        turn: this.state.turn + 1\n                    });\n                }\n            } else if (column === zeroJ) {\n                if (row === zeroI + 1 || row === zeroI - 1) {\n                    result[zeroI][zeroJ] = result[row][column];\n                    result[row][column] = 0\n\n                    this.setState({\n                        squares: result.slice(),\n                        turn: this.state.turn + 1\n                    });\n                }\n            }\n\n            if (checkWin(this.state.squares)) {\n                this.setState({\n                    isWin: true\n                })\n            }\n        }\n    }\n\n    handleNewGame() {\n        const field = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0];\n        const result = getWinningCombination()\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                while (true) {\n                    const rand = field[Math.floor(Math.random() * field.length)];\n\n                    if (rand === -1) {\n                        continue;\n                    } else {\n                        result[i][j] = rand;\n                        field[field.indexOf(rand)] = -1;\n                        break;\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                if (result[i][j] === 0) {\n                    result[i][j] = result[3][3];\n                    result[3][3] = 0\n                }\n            }\n        }\n\n        this.setState({\n            squares: result.slice(),\n            isWin: false,\n            turn: 0\n        });\n    }\n\n    renderSquare(row, column) {\n        let squareClass = '';\n        if (this.state.squares[row][column] === 0) {\n            squareClass = 'square-empty'\n        } else {\n            squareClass = 'square'\n        }\n\n        return <Square\n            class={squareClass}\n            value={this.state.squares[row][column]}\n            onClick={() => this.handleClick(row, column)}\n        />;\n    }\n\n    render() {\n        const status = `Turn: ${this.state.turn}`;\n        let victory = '';\n        if (this.state.isWin) {\n            victory = 'VICTORY!!!'\n        }\n\n        return (\n            <div className=\"board\">\n                <div className=\"status\">{status}</div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 0)}\n                    {this.renderSquare(0, 1)}\n                    {this.renderSquare(0, 2)}\n                    {this.renderSquare(0, 3)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(1, 0)}\n                    {this.renderSquare(1, 1)}\n                    {this.renderSquare(1, 2)}\n                    {this.renderSquare(1, 3)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(2, 0)}\n                    {this.renderSquare(2, 1)}\n                    {this.renderSquare(2, 2)}\n                    {this.renderSquare(2, 3)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3, 0)}\n                    {this.renderSquare(3, 1)}\n                    {this.renderSquare(3, 2)}\n                    {this.renderSquare(3, 3)}\n                </div>\n                <NewGameButton onClick={() => this.handleNewGame()} />\n                <div className=\"victory\">{victory}</div>\n            </div>\n        );\n    }\n}\n\nexport default Board","import React from 'react';\nimport Board from \"./board\";\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <Board />\n        )\n    }\n}\n\nexport default Game","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game'\nimport './index.css'\n\nReactDOM.render(\n    <Game/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}